#!/usr/bin/env python

# -*- coding: utf-8 -*-
# Copyright (c) 2015, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the <ORGANIZATION> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import os
import sys
import logging


from dirlistproc import DirectoryListProcessor

if __name__ == "__main__":
    sys.path.append(os.path.join(os.path.join(os.getcwd(), os.path.dirname(__file__)), '..'))

from hcls_fhir_rdf.defaults import *
from hcls_fhir_rdf.fhir_elements import PathElements

elements = PathElements()


def addargs(args: argparse.ArgumentParser) -> None:
    """ Add local args to the dirlistproc set
    :param args: dirlistproc arguments
    """
    args.add_argument("--logfile", help="Logging file. Default is 'extract.log'", default=DEFAULT_LOG_FILE)
    PathElements.addargs(args)


def procargs(opts: argparse.Namespace) -> None:
    """ Evaluate the return arguments
    :param opts: argument parser output
    """
    if not opts.indir:
        opts.indir = DEFAULT_TARGET_DIRECTORY
    if not opts.outdir:
        opts.outdir = DEFAULT_TARGET_DIRECTORY
    if not opts.outfile:
        opts.outfile = DEFAULT_XML_DEFINITIONS
    logging.basicConfig(filename=opts.logfile, level=LOGGING_LEVEL, filemode='w')


def proc_profiles(input_fn: str, _, opts: argparse.Namespace) -> bool:
    """ Process a FHIR profile file (json format)
    :param input_fn: name of the file to process
    :param _: (unused)
    :param opts: process options
    :return: True if file was processed, false if it was skipped
    """
    logging.info("Processing %s" % input_fn)
    return elements.proc_file(input_fn, opts.differential)


def main():
    dlp = DirectoryListProcessor(None, "Generate XSLT definitions for FHIR", ".profile.json", None, addargs, procargs)
    nfiles, nsuccess = dlp.run(proc_profiles, PathElements.inp_filtr)
    print(elements.as_xml, file=open(dlp.opts.outfile, 'w') if dlp.opts.outfile else sys.stdout)
    logging.info("Total=%d Successful=%d" % (nfiles, nsuccess))


if __name__ == '__main__':
    main()
